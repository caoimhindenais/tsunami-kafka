/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example.tsunamiservice;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Schema for com.example.tsunamiservice.Tsnunami */
@org.apache.avro.specific.AvroGenerated
public class Tsnunami extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -261274228188125342L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Tsnunami\",\"namespace\":\"com.example.tsunamiservice\",\"doc\":\"Schema for com.example.tsunamiservice.Tsnunami\",\"fields\":[{\"name\":\"country\",\"type\":[\"null\",\"string\"]},{\"name\":\"height\",\"type\":[\"null\",\"double\"]},{\"name\":\"localDate\",\"type\":[\"null\",\"string\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Tsnunami> ENCODER =
      new BinaryMessageEncoder<Tsnunami>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Tsnunami> DECODER =
      new BinaryMessageDecoder<Tsnunami>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Tsnunami> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Tsnunami> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Tsnunami>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Tsnunami to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Tsnunami from a ByteBuffer. */
  public static Tsnunami fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public CharSequence country;
  @Deprecated public Double height;
  @Deprecated public CharSequence localDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Tsnunami() {}

  /**
   * All-args constructor.
   * @param country The new value for country
   * @param height The new value for height
   * @param localDate The new value for localDate
   */
  public Tsnunami(CharSequence country, Double height, CharSequence localDate) {
    this.country = country;
    this.height = height;
    this.localDate = localDate;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return country;
    case 1: return height;
    case 2: return localDate;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: country = (CharSequence)value$; break;
    case 1: height = (Double)value$; break;
    case 2: localDate = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'country' field.
   * @return The value of the 'country' field.
   */
  public CharSequence getCountry() {
    return country;
  }

  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(CharSequence value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'height' field.
   * @return The value of the 'height' field.
   */
  public Double getHeight() {
    return height;
  }

  /**
   * Sets the value of the 'height' field.
   * @param value the value to set.
   */
  public void setHeight(Double value) {
    this.height = value;
  }

  /**
   * Gets the value of the 'localDate' field.
   * @return The value of the 'localDate' field.
   */
  public CharSequence getLocalDate() {
    return localDate;
  }

  /**
   * Sets the value of the 'localDate' field.
   * @param value the value to set.
   */
  public void setLocalDate(CharSequence value) {
    this.localDate = value;
  }

  /**
   * Creates a new Tsnunami RecordBuilder.
   * @return A new Tsnunami RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new Tsnunami RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Tsnunami RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new Tsnunami RecordBuilder by copying an existing Tsnunami instance.
   * @param other The existing instance to copy.
   * @return A new Tsnunami RecordBuilder
   */
  public static Builder newBuilder(Tsnunami other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for Tsnunami instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Tsnunami>
    implements org.apache.avro.data.RecordBuilder<Tsnunami> {

    private CharSequence country;
    private Double height;
    private CharSequence localDate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.country)) {
        this.country = data().deepCopy(fields()[0].schema(), other.country);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.height)) {
        this.height = data().deepCopy(fields()[1].schema(), other.height);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.localDate)) {
        this.localDate = data().deepCopy(fields()[2].schema(), other.localDate);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Tsnunami instance
     * @param other The existing instance to copy.
     */
    private Builder(Tsnunami other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.country)) {
        this.country = data().deepCopy(fields()[0].schema(), other.country);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.height)) {
        this.height = data().deepCopy(fields()[1].schema(), other.height);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.localDate)) {
        this.localDate = data().deepCopy(fields()[2].schema(), other.localDate);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public CharSequence getCountry() {
      return country;
    }

    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public Builder setCountry(CharSequence value) {
      validate(fields()[0], value);
      this.country = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public Builder clearCountry() {
      country = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'height' field.
      * @return The value.
      */
    public Double getHeight() {
      return height;
    }

    /**
      * Sets the value of the 'height' field.
      * @param value The value of 'height'.
      * @return This builder.
      */
    public Builder setHeight(Double value) {
      validate(fields()[1], value);
      this.height = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'height' field has been set.
      * @return True if the 'height' field has been set, false otherwise.
      */
    public boolean hasHeight() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'height' field.
      * @return This builder.
      */
    public Builder clearHeight() {
      height = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'localDate' field.
      * @return The value.
      */
    public CharSequence getLocalDate() {
      return localDate;
    }

    /**
      * Sets the value of the 'localDate' field.
      * @param value The value of 'localDate'.
      * @return This builder.
      */
    public Builder setLocalDate(CharSequence value) {
      validate(fields()[2], value);
      this.localDate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'localDate' field has been set.
      * @return True if the 'localDate' field has been set, false otherwise.
      */
    public boolean hasLocalDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'localDate' field.
      * @return This builder.
      */
    public Builder clearLocalDate() {
      localDate = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Tsnunami build() {
      try {
        Tsnunami record = new Tsnunami();
        record.country = fieldSetFlags()[0] ? this.country : (CharSequence) defaultValue(fields()[0]);
        record.height = fieldSetFlags()[1] ? this.height : (Double) defaultValue(fields()[1]);
        record.localDate = fieldSetFlags()[2] ? this.localDate : (CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Tsnunami>
    WRITER$ = (org.apache.avro.io.DatumWriter<Tsnunami>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Tsnunami>
    READER$ = (org.apache.avro.io.DatumReader<Tsnunami>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
